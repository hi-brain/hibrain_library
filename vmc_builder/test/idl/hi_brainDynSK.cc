// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "hi_brain.hh"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::PR_structMember _0RL_structmember_Vision_mTime[] = {
  {"sec", CORBA::TypeCode::PR_ulong_tc()},
  {"msec", CORBA::TypeCode::PR_ulong_tc()}
};

#ifdef _0RL_tc_Vision_mTime
#  undef _0RL_tc_Vision_mTime
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mTime = CORBA::TypeCode::PR_struct_tc("IDL:Vision/Time:1.0", "Time", _0RL_structmember_Vision_mTime, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_Time = _0RL_tc_Vision_mTime;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_Time = _0RL_tc_Vision_mTime;
#endif



static CORBA::PR_structMember _0RL_structmember_Vision_mMatrix[] = {
  {"tm", _0RL_tc_Vision_mTime},
  {"type", CORBA::TypeCode::PR_ushort_tc()},
  {"name", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), &_0RL_tcTrack)},
  {"div", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_short_tc(), &_0RL_tcTrack)},
  {"pixels", CORBA::TypeCode::PR_sequence_tc(0, CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Vision_mMatrix
#  undef _0RL_tc_Vision_mMatrix
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mMatrix = CORBA::TypeCode::PR_struct_tc("IDL:Vision/Matrix:1.0", "Matrix", _0RL_structmember_Vision_mMatrix, 5, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_Matrix = _0RL_tc_Vision_mMatrix;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_Matrix = _0RL_tc_Vision_mMatrix;
#endif




static CORBA::PR_structMember _0RL_structmember_Vision_mMatarr[] = {
  {"arr", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_Vision_mMatrix, &_0RL_tcTrack)}
};

#ifdef _0RL_tc_Vision_mMatarr
#  undef _0RL_tc_Vision_mMatarr
#endif
static CORBA::TypeCode_ptr _0RL_tc_Vision_mMatarr = CORBA::TypeCode::PR_struct_tc("IDL:Vision/Matarr:1.0", "Matarr", _0RL_structmember_Vision_mMatarr, 1, &_0RL_tcTrack);



#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace Vision { 
  const ::CORBA::TypeCode_ptr _tc_Matarr = _0RL_tc_Vision_mMatarr;
} 
#else
const ::CORBA::TypeCode_ptr Vision::_tc_Matarr = _0RL_tc_Vision_mMatarr;
#endif


static void _0RL_Vision_mTime_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::Time* _p = (Vision::Time*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mTime_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::Time* _p = new Vision::Time;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mTime_destructor_fn(void* _v)
{
  Vision::Time* _p = (Vision::Time*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::Time& _s)
{
  Vision::Time* _p = new Vision::Time(_s);
  _a.PR_insert(_0RL_tc_Vision_mTime,
               _0RL_Vision_mTime_marshal_fn,
               _0RL_Vision_mTime_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::Time* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mTime,
               _0RL_Vision_mTime_marshal_fn,
               _0RL_Vision_mTime_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::Time*& _sp)
{
  return _a >>= (const Vision::Time*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::Time*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mTime,
                    _0RL_Vision_mTime_unmarshal_fn,
                    _0RL_Vision_mTime_marshal_fn,
                    _0RL_Vision_mTime_destructor_fn,
                    _v)) {
    _sp = (const Vision::Time*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Vision_mMatrix_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::Matrix* _p = (Vision::Matrix*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mMatrix_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::Matrix* _p = new Vision::Matrix;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mMatrix_destructor_fn(void* _v)
{
  Vision::Matrix* _p = (Vision::Matrix*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::Matrix& _s)
{
  Vision::Matrix* _p = new Vision::Matrix(_s);
  _a.PR_insert(_0RL_tc_Vision_mMatrix,
               _0RL_Vision_mMatrix_marshal_fn,
               _0RL_Vision_mMatrix_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::Matrix* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mMatrix,
               _0RL_Vision_mMatrix_marshal_fn,
               _0RL_Vision_mMatrix_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::Matrix*& _sp)
{
  return _a >>= (const Vision::Matrix*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::Matrix*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mMatrix,
                    _0RL_Vision_mMatrix_unmarshal_fn,
                    _0RL_Vision_mMatrix_marshal_fn,
                    _0RL_Vision_mMatrix_destructor_fn,
                    _v)) {
    _sp = (const Vision::Matrix*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_Vision_mMatarr_marshal_fn(cdrStream& _s, void* _v)
{
  Vision::Matarr* _p = (Vision::Matarr*)_v;
  *_p >>= _s;
}
static void _0RL_Vision_mMatarr_unmarshal_fn(cdrStream& _s, void*& _v)
{
  Vision::Matarr* _p = new Vision::Matarr;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_Vision_mMatarr_destructor_fn(void* _v)
{
  Vision::Matarr* _p = (Vision::Matarr*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const Vision::Matarr& _s)
{
  Vision::Matarr* _p = new Vision::Matarr(_s);
  _a.PR_insert(_0RL_tc_Vision_mMatarr,
               _0RL_Vision_mMatarr_marshal_fn,
               _0RL_Vision_mMatarr_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, Vision::Matarr* _sp)
{
  _a.PR_insert(_0RL_tc_Vision_mMatarr,
               _0RL_Vision_mMatarr_marshal_fn,
               _0RL_Vision_mMatarr_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, Vision::Matarr*& _sp)
{
  return _a >>= (const Vision::Matarr*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const Vision::Matarr*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_Vision_mMatarr,
                    _0RL_Vision_mMatarr_unmarshal_fn,
                    _0RL_Vision_mMatarr_marshal_fn,
                    _0RL_Vision_mMatarr_destructor_fn,
                    _v)) {
    _sp = (const Vision::Matarr*)_v;
    return 1;
  }
  return 0;
}

